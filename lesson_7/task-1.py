"""
1. Отсортируйте по убыванию методом "пузырька" одномерный целочисленный массив,
заданный случайными числами на промежутке [-100; 100). Выведите на экран
исходный и отсортированный массивы.
Сортировка должна быть реализована в виде функции.
Обязательно доработайте алгоритм (сделайте его умнее).
Идея доработки: если за проход по списку не совершается ни одной сортировки,
то завершение. Обязательно сделайте замеры времени обеих реализаций
и укажите дала ли оптимизация эффективность.
Подсказка: обратите внимание, сортируем не по возрастанию, как в примере,
а по убыванию.
Сделайте выводы!!!
Опишите в чем была ваша доработка и помогла ли вам доработка??
"""

from random import randint
from timeit import timeit


def sort_original(lst):
    # сортировка из урока
    for i in range(len(lst)):
        for j in range(len(lst) - 1):
            if lst[j] < lst[j + 1]:
                lst[j], lst[j + 1] = lst[j + 1], lst[j]
    return lst


def sort_optimized(lst):
    # сортировка улучшенная
    # добавила флаг. если массив отсортирован - выходит
    flag = True
    while flag:
        flag = False
        for i in range(len(lst) - 1):
            if lst[i] < lst[i + 1]:
                lst[i], lst[i + 1] = lst[i + 1], lst[i]
                flag = True
    return lst


arr = [randint(-100, 100) for i in range(1000)]
print(timeit('sort_original(arr[:])', globals=globals(), number=100))     # 10.7526586
print(timeit('sort_optimized(arr[:])', globals=globals(), number=100))    # 9.8363436

# время лучше, но совсем немного

